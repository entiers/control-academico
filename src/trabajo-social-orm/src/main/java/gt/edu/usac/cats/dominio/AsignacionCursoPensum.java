/*
 * @(#)AsignacionCursoPensum.java   29.03.10
 *
 * Universidad de San Carlos de Guatemala
 * Escuela de Trabajo Social
 * Control Academico
 *
 */
package gt.edu.usac.cats.dominio;

// Generated 28/06/2011 02:49:40 PM by Hibernate Tools 3.2.1.GA
//~--- JDK imports ------------------------------------------------------------
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import org.codehaus.jackson.annotate.JsonIgnore;

/**
 * AsignacionCursoPensum generated by hbm2java
 */
@Entity
@Table(name = "asignacion_curso_pensum",
schema = "control",
uniqueConstraints =
@UniqueConstraint(columnNames = {"id_curso", "id_pensum"}, name = "asignacion_curso_pensum_uk"))
public class AsignacionCursoPensum implements java.io.Serializable {

    private Short idAsignacionCursoPensum;
    private Curso curso;
    private Pensum pensum;
    private boolean obligatorio;
    private Short creditosPracticos;
    private Short creditosPrerrequisito;
    private Short creditosTeoricos;
    private short numeroSemestre;
    private short examenFinal;
    private short laboratorio;
    private short zona;
    private short notaAprobacion;
    private Set<AsignacionCursoPensum> asignacionCursoPensumsForIdCursoPensumPrerequisito = new HashSet<AsignacionCursoPensum>(0);
    private Set<AsignacionCursoPensum> asignacionCursoPensumsForIdCursoPensumOriginal = new HashSet<AsignacionCursoPensum>(0);
    private Set<CursoAprobado> cursoAprobados = new HashSet<CursoAprobado>(0);
    private Set<AsignacionCursoPensum> asignacionCursoPensumsForIdCursoPensumEquivalencia = new HashSet<AsignacionCursoPensum>(0);
    private Set<Horario> horarios = new HashSet<Horario>(0);
    private Set<AsignacionCursoPensum> asignacionCursoPensumsForIdCursoPensum = new HashSet<AsignacionCursoPensum>(0);
    private Set<BoletaBanco> boletaBancos = new HashSet<BoletaBanco>(0);

    public AsignacionCursoPensum() {
        this.idAsignacionCursoPensum = 0;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_asignacion_curso_pensum", unique = true, nullable = false)
    public Short getIdAsignacionCursoPensum() {
        return this.idAsignacionCursoPensum;
    }

    public void setIdAsignacionCursoPensum(Short idAsignacionCursoPensum) {
        this.idAsignacionCursoPensum = idAsignacionCursoPensum;
    }

    @ManyToOne(cascade= CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinColumn(name = "id_curso", nullable = false)
    @OrderBy("codigo")
    @JsonIgnore
    public Curso getCurso() {
        return this.curso;
    }

    public void setCurso(Curso curso) {
        this.curso = curso;
    }

    @ManyToOne(cascade= CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinColumn(name = "id_pensum", nullable = false)
    @JsonIgnore
    public Pensum getPensum() {
        return this.pensum;
    }

    public void setPensum(Pensum pensum) {
        this.pensum = pensum;
    }

    @Column(name = "obligatorio", nullable = false)
    public boolean isObligatorio() {
        return this.obligatorio;
    }

    public void setObligatorio(boolean obligatorio) {
        this.obligatorio = obligatorio;
    }

    @Column(name = "creditos_practicos")
    public Short getCreditosPracticos() {
        return this.creditosPracticos;
    }

    public void setCreditosPracticos(Short creditosPracticos) {
        this.creditosPracticos = creditosPracticos;
    }

    @Column(name = "creditos_prerrequisito")
    public Short getCreditosPrerrequisito() {
        return this.creditosPrerrequisito;
    }

    public void setCreditosPrerrequisito(Short creditosPrerrequisito) {
        this.creditosPrerrequisito = creditosPrerrequisito;
    }

    @Column(name = "creditos_teoricos")
    public Short getCreditosTeoricos() {
        return this.creditosTeoricos;
    }

    public void setCreditosTeoricos(Short creditosTeoricos) {
        this.creditosTeoricos = creditosTeoricos;
    }

    @Column(name = "numero_semestre", nullable = false)
    public short getNumeroSemestre() {
        return this.numeroSemestre;
    }

    public void setNumeroSemestre(short numeroSemestre) {
        this.numeroSemestre = numeroSemestre;
    }

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "prerrequisito", schema = "control", joinColumns = {
        @JoinColumn(name = "id_curso_pensum", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "id_curso_pensum_prerequisito", nullable = false, updatable = false)})
    @OrderBy("numeroSemestre")
    @JsonIgnore
    public Set<AsignacionCursoPensum> getAsignacionCursoPensumsForIdCursoPensumPrerequisito() {
        return this.asignacionCursoPensumsForIdCursoPensumPrerequisito;
    }

    public void setAsignacionCursoPensumsForIdCursoPensumPrerequisito(Set<AsignacionCursoPensum> asignacionCursoPensumsForIdCursoPensumPrerequisito) {
        this.asignacionCursoPensumsForIdCursoPensumPrerequisito = asignacionCursoPensumsForIdCursoPensumPrerequisito;
    }

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "curso_pensum_equivalencia", schema = "control", joinColumns = {
        @JoinColumn(name = "id_curso_pensum_equivalencia", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "id_curso_pensum_original", nullable = false, updatable = false)})
    @JsonIgnore
    public Set<AsignacionCursoPensum> getAsignacionCursoPensumsForIdCursoPensumOriginal() {
        return this.asignacionCursoPensumsForIdCursoPensumOriginal;
    }

    public void setAsignacionCursoPensumsForIdCursoPensumOriginal(Set<AsignacionCursoPensum> asignacionCursoPensumsForIdCursoPensumOriginal) {
        this.asignacionCursoPensumsForIdCursoPensumOriginal = asignacionCursoPensumsForIdCursoPensumOriginal;
    }

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "curso_pensum_equivalencia", schema = "control", joinColumns = {
        @JoinColumn(name = "id_curso_pensum_original", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "id_curso_pensum_equivalencia", nullable = false, updatable = false)})
    @JsonIgnore
    public Set<AsignacionCursoPensum> getAsignacionCursoPensumsForIdCursoPensumEquivalencia() {
        return this.asignacionCursoPensumsForIdCursoPensumEquivalencia;
    }

    public void setAsignacionCursoPensumsForIdCursoPensumEquivalencia(Set<AsignacionCursoPensum> asignacionCursoPensumsForIdCursoPensumEquivalencia) {
        this.asignacionCursoPensumsForIdCursoPensumEquivalencia = asignacionCursoPensumsForIdCursoPensumEquivalencia;
    }

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "prerrequisito", schema = "control", joinColumns = {
        @JoinColumn(name = "id_curso_pensum_prerequisito", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "id_curso_pensum", nullable = false, updatable = false)})
    @JsonIgnore
    public Set<AsignacionCursoPensum> getAsignacionCursoPensumsForIdCursoPensum() {
        return this.asignacionCursoPensumsForIdCursoPensum;
    }

    public void setAsignacionCursoPensumsForIdCursoPensum(Set<AsignacionCursoPensum> asignacionCursoPensumsForIdCursoPensum) {
        this.asignacionCursoPensumsForIdCursoPensum = asignacionCursoPensumsForIdCursoPensum;
    }

    @Column(name = "examen_final", nullable = false)
    public short getExamenFinal() {
        return this.examenFinal;
    }

    public void setExamenFinal(short examenFinal) {
        this.examenFinal = examenFinal;
    }

    @Column(name = "laboratorio", nullable = false)
    public short getLaboratorio() {
        return this.laboratorio;
    }

    public void setLaboratorio(short laboratorio) {
        this.laboratorio = laboratorio;
    }

    @Column(name = "zona", nullable = false)
    public short getZona() {
        return this.zona;
    }

    public void setZona(short zona) {
        this.zona = zona;
    }

    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="asignacionCursoPensum")
    public Set<CursoAprobado> getCursoAprobados() {
        return this.cursoAprobados;
    }
    
    public void setCursoAprobados(Set<CursoAprobado> cursoAprobados) {
        this.cursoAprobados = cursoAprobados;
    }
    
    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="asignacionCursoPensum")
    public Set<Horario> getHorarios() {
        return this.horarios;
    }
    
    public void setHorarios(Set<Horario> horarios) {
        this.horarios = horarios;
    }
    
    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="asignacionCursoPensum")
    @JsonIgnore
    public Set<BoletaBanco> getBoletaBancos() {
        return this.boletaBancos;
    }

    public void setBoletaBancos(Set<BoletaBanco> boletaBancos) {
        this.boletaBancos = boletaBancos;
    }
    /**
     * Concatena la informaci&oacute;n del curso con el n&uacute;mero del semestre.  Es de utilizada para la visualizaci&oacute;n
     * en las vistas.  Este atributo <b>NO</b> pertenece a la BD.
     *
     * @return Cadena de car&aacute;cteres con la concatenaci&oacute;n de la informaci&oacute;n del curso y el n&uacute;mero del semestre.
     */
    @Transient
    public String getCursoNumeroSemestre() {
        return this.curso.getCodigoNombre() + " [" + this.numeroSemestre + "]";
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append("AsignacionCursoPensum (idAsignacionCursoPensum=").append(this.idAsignacionCursoPensum).
                append(", numeroSemestre=").append(this.numeroSemestre).
                append(", obligatorio=").append(this.obligatorio).append(")");

        return builder.toString();
    }
    
    @Column(name = "nota_aprobacion", nullable = false)
    public short getNotaAprobacion() {
        return this.notaAprobacion;
    }

    public void setNotaAprobacion(short notaAprobacion) {
        this.zona = notaAprobacion;
    }
}


//~ Formatted by Jindent --- http://www.jindent.com
